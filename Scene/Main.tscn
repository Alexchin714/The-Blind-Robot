[gd_scene load_steps=7 format=2]

[ext_resource path="res://Scene/World.tscn" type="PackedScene" id=1]
[ext_resource path="res://Art/psxdither.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float h = 1;
uniform float v = 0;
uniform bool enabled = true;

void fragment()
{
	// float kernel[] = {0.06136, 0.24477, 0.38774, 0.24477, 0.06136};
	float kernel[] = {0.31946576033846985, 0.3610684793230603, 0.31946576033846985};
	vec2 px = TEXTURE_PIXEL_SIZE;
	vec4 col = vec4(0);

	if (enabled)
	{
		for (int i = 0; i < kernel.length(); i++)
		{
			// int radius = (kernel.length() - 1) / 2;  // This is wrong for some reason?
			int radius = 1;
			int distance = i - radius;
			col += texture(TEXTURE, UV + px * vec2(h * float(distance), v * float(distance))) * kernel[i];
		}
		COLOR = col;
	}
	else
	{
		COLOR = texture(TEXTURE, UV);
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/h = 2.0
shader_param/v = 2.0
shader_param/enabled = true

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
// originally based on https://github.com/WittyCognomen/godot-psx-shaders-demo/blob/master/shaders/psx_dither_post.shader

uniform sampler2D dither_tex: hint_white;
uniform float col_depth = 24.0;
uniform bool dither_banding = true;
uniform bool enabled = true;

void fragment() {
	COLOR = texture(TEXTURE, SCREEN_UV);

	if (enabled)
	{
		vec2 dith_size = vec2(textureSize(dither_tex,0)); // for GLES2: substitute for the dimensions of the dithering matrix
		vec2 buf_size = vec2(textureSize(TEXTURE,0));
		vec3 dith = texture(dither_tex, SCREEN_UV*(buf_size/dith_size)).rgb;
		dith -= 0.5;
		COLOR.rgb = round(COLOR.rgb*col_depth + dith * (dither_banding ? 1.0 : 0.0)) / col_depth;
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/col_depth = 16.0
shader_param/dither_banding = true
shader_param/enabled = true
shader_param/dither_tex = ExtResource( 2 )

[node name="Main" type="Node"]

[node name="mb" type="ViewportContainer" parent="."]
material = SubResource( 2 )
margin_right = 1280.0
margin_bottom = 720.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="mb"]
size = Vector2( 1280, 720 )
handle_input_locally = false
render_target_update_mode = 3

[node name="cedpa" type="ViewportContainer" parent="mb/Viewport"]
material = SubResource( 4 )
margin_right = 40.0
margin_bottom = 40.0

[node name="Viewport" type="Viewport" parent="mb/Viewport/cedpa"]
size = Vector2( 1280, 720 )
handle_input_locally = false
msaa = 2
hdr = false
render_target_update_mode = 3
audio_listener_enable_2d = true
audio_listener_enable_3d = true

[node name="Main" parent="mb/Viewport/cedpa/Viewport" instance=ExtResource( 1 )]
